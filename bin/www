#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
const socketio=require('socket.io');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */ 

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

const io=socketio(server);


function shuffle(array) {
  var currentIndex = array.length, temporaryValue, randomIndex;

  // While there remain elements to shuffle...
  while (0 !== currentIndex) {

    // Pick a remaining element...
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex -= 1;

    // And swap it with the current element.
    temporaryValue = array[currentIndex];
    array[currentIndex] = array[randomIndex];
    array[randomIndex] = temporaryValue;
  }

  return array;
}

let connectedSockets=[]
let selectedcards=[];
let players=[]
let playersArr = [
  { name: 'Player1', image: '', points: 0, id: '' },
  { name: 'Player2', image: '', points: 0, id: '' },
  { name: 'Player3', image: '', points: 0, id: '' },
  { name: 'Player4', image: '', points: 0, id: '' },
]
  


io.on('connect', function(socket){
  let room;
  
 connectedSockets.push(socket.id);
  
  socket.on('hola', (data)=>{
    console.log(data)
    room=Math.ceil(connectedSockets.length/4) 
    let player; 
    
    socket.join(room)
    io.sockets.adapter.rooms.forEach((user)=>{
      console.log(user)
    }) 
     
    
    if(Math.ceil(connectedSockets.length/4)===1){
    player=connectedSockets.length;

    playerdata={player, username: data.username, image:data.image}
    players.push(playerdata)
    
    players.map((player, index) =>{
      playersArr[index].name = player.username
      playersArr[index].image = player.image
    })
    
    }

    
    
  
  socket.emit('welcome', {room,player, data})
  io.to(room).emit('players', playersArr )
  io.to(room).emit('otherusers', ("a new user joined "));
  })
  

  
  
  socket.on('cardselected', async(url)=>{
    console.log(url)
    
    
    selectedcards.push(url);
    console.log(selectedcards)

    if (selectedcards.length===4){
      let shuffledCards=shuffle(selectedcards)
      console.log('selected',selectedcards)
      console.log('shuffled' ,shuffledCards)

      //socket.emit('selectedcards', (selectedcards))
      await io.to(room).emit('selectedcards', (shuffledCards));
      selectedcards=[]
      console.log(selectedcards)
    }
  })
  
  socket.on('disconnect', function(socket){
    let index=connectedSockets.indexOf(socket.id)
    let playerIndex=players.indexOf(socket.id)
console.log('llega players arr?',playersArr)
    //playersArr[playerIndex + 2].name = `player${playerIndex + 2}`
    console.log('wtf bro',playerIndex)
    console.log('antes del splice',players)
    connectedSockets.splice(index,1) 
    players.splice(playerIndex,1)
    console.log('despues del splice',players)
    console.log('llega players arr pos splice?',playersArr)
    console.log('user disconnected')

    

  
  })

  socket.on('chat', function(data){
    console.log('message: ' + data)
    io.to(room).emit('chat', (data))
    // socket.emit('chat', data)
  })
})




/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
