#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
const socketio=require('socket.io');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */ 

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

const io=socketio(server);

let connectedSockets=[]
const selectedcards=[];



io.on('connect', function(socket){
  let room;
  
  connectedSockets.push(socket.id);
  
  socket.on('hola', (data)=>{

    room=Math.ceil(connectedSockets.length/4) 
    let player; 
    
    socket.join(room)
    console.log(io.sockets.adapter.rooms)
    
    if(Math.ceil(connectedSockets.length/4)===1){
    player=connectedSockets.length;
    
    }
  
  socket.emit('welcome', {room,player})
  io.to(room).emit('otherusers', ("a new user joined "));
  })
  

  
  
  socket.on('cardselected', (url)=>{
    console.log(url)
    
    
    selectedcards.push(url);
    console.log(selectedcards)

    if (selectedcards.length===4){
      //socket.emit('selectedcards', (selectedcards))
      socket.emit('selectedcards', (selectedcards));
    }
  })
  
  socket.on('disconnect', function(socket){
    let index=connectedSockets.indexOf(socket.id)
    connectedSockets.splice(index,1)
    console.log('user disconnected')

    
  })

  socket.on('chat', function(data){
    console.log('message: ' + data)
    io.to(room).emit('chat', (data))
    // socket.emit('chat', data)
  })
})




/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
